/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FolderPeriodicNotesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  noteFolder: "/"
};
var FolderPeriodicNotesPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "open-daily-note",
      name: "Open daily note",
      callback: () => this.createOrOpenPeriodicNote("daily" /* Daily */)
    });
    this.addCommand({
      id: "open-weekly-note",
      name: "Open weekly note",
      callback: () => this.createOrOpenPeriodicNote("weekly" /* Weekly */)
    });
    this.addCommand({
      id: "open-monthly-note",
      name: "Open monthly note",
      callback: () => this.createOrOpenPeriodicNote("monthly" /* Monthly */)
    });
    this.addCommand({
      id: "open-yearly-note",
      name: "Open yearly note",
      callback: () => this.createOrOpenPeriodicNote("yearly" /* Yearly */)
    });
    this.addCommand({
      id: "open-yesterday",
      name: "Yesterday",
      callback: () => this.createOrOpenYesterdaysDailyNote()
    });
    this.addCommand({
      id: "open-tomorrow",
      name: "Tomorrow",
      callback: () => this.createOrOpenTomorrowsDailyNote()
    });
    this.addCommand({
      id: "open-last-5-days-notes",
      name: "Last 5 days",
      callback: () => this.createOrOpenLast5DaysNotes()
    });
    this.addCommand({
      id: "generate-all-daily-notes-for-current-year",
      name: "Generate all daily notes for current calendar year",
      callback: () => this.generateAllDailyNotesForCurrentYear()
    });
    this.addSettingTab(new FolderPeriodicNotesSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Ensure that all the folders and folder notes in the path exist
   *
   * Example 1, "Periodic Notes/2024/2024-01/2024-01-01" will create:
   * - Periodic Notes/2024/2024.md
   * - Periodic Notes/2024/2024-01/2024-01.md
   * - Periodic Notes/2024/2024-01/2024-01-01.md
   * Then will open the note Periodic Notes/2024/2024-01/2024-01-01.md
   *
   * Example 2, "Periodic Notes/2024/2024-01" will create:
   * - Periodic Notes/2024/2024.md
   * - Periodic Notes/2024/2024-01/2024-01.md
   * Then will open the note Periodic Notes/2024/2024-01/2024-01.md
   *
   * Example 3, "Periodic Notes/2024" will create:
   * - Periodic Notes/2024/2024.md
   * Then will open the note Periodic Notes/2024/2024.md
   */
  async createOrOpenPeriodicNote(periodType) {
    const date = (0, import_obsidian.moment)();
    const year = date.format("YYYY");
    const month = date.format("YYYY-MM");
    const day = date.format("YYYY-MM-DD");
    const week = date.format("YYYY-[W]WW");
    let noteFolderPath = this.settings.noteFolder;
    if (periodType === "yearly" /* Yearly */) {
      await this.createYearFolderNote(year);
      return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${year}.md`, "", true);
    }
    if (periodType === "weekly" /* Weekly */) {
      await this.createYearFolderNote(year);
      const weekStart = (0, import_obsidian.moment)().startOf("isoWeek");
      const weekMonth = weekStart.format("YYYY-MM");
      await this.createMonthFolderNote(year, weekMonth);
      await this.createWeekNote(year, weekMonth, week);
      return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${weekMonth}/${week}.md`, "", true);
    }
    if (periodType === "monthly" /* Monthly */) {
      await this.createYearFolderNote(year);
      await this.createMonthFolderNote(year, month);
      return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${month}/${month}.md`, "", true);
    }
    if (periodType === "daily" /* Daily */) {
      await this.createYearFolderNote(year);
      await this.createMonthFolderNote(year, month);
      await this.createDayNote(year, month, day);
      return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${month}/${day}.md`, "", true);
    }
  }
  async createYearFolderNote(year) {
    const yearFolderPath = `${this.settings.noteFolder}/${year}`;
    const yearFilePath = `${yearFolderPath}/${year}.md`;
    let existingYearFolder = this.app.vault.getAbstractFileByPath(yearFolderPath);
    if (!existingYearFolder) {
      await this.app.vault.createFolder(yearFolderPath);
    }
    let existingYearFile = this.app.vault.getAbstractFileByPath(yearFilePath);
    if (!existingYearFile) {
      await this.app.vault.create(yearFilePath, "");
    }
  }
  async createMonthFolderNote(year, month) {
    const monthFolderPath = `${this.settings.noteFolder}/${year}/${month}`;
    const monthFilePath = `${monthFolderPath}/${month}.md`;
    let existingMonthFolder = this.app.vault.getAbstractFileByPath(monthFolderPath);
    if (!existingMonthFolder) {
      await this.app.vault.createFolder(monthFolderPath);
    }
    let existingMonthFile = this.app.vault.getAbstractFileByPath(monthFilePath);
    if (!existingMonthFile) {
      await this.app.vault.create(monthFilePath, "");
    }
  }
  async createWeekNote(year, month, week) {
    const weekFolderPath = `${this.settings.noteFolder}/${year}/${month}`;
    const weekFilePath = `${weekFolderPath}/${week}.md`;
    let existingWeekFolder = this.app.vault.getAbstractFileByPath(weekFolderPath);
    if (!existingWeekFolder) {
      await this.app.vault.createFolder(weekFolderPath);
    }
    let existingWeekFile = this.app.vault.getAbstractFileByPath(weekFilePath);
    if (!existingWeekFile) {
      await this.app.vault.create(weekFilePath, "");
    }
  }
  async createDayNote(year, month, day) {
    const dayFolderPath = `${this.settings.noteFolder}/${year}/${month}`;
    const dayFilePath = `${dayFolderPath}/${day}.md`;
    let existingMonthFolder = this.app.vault.getAbstractFileByPath(dayFolderPath);
    if (!existingMonthFolder) {
      await this.app.vault.createFolder(dayFolderPath);
    }
    let existingDayFile = this.app.vault.getAbstractFileByPath(dayFilePath);
    if (!existingDayFile) {
      await this.app.vault.create(dayFilePath, "");
    }
  }
  async createOrOpenYesterdaysDailyNote() {
    const date = (0, import_obsidian.moment)().subtract(1, "days");
    const year = date.format("YYYY");
    const month = date.format("YYYY-MM");
    const day = date.format("YYYY-MM-DD");
    let noteFolderPath = this.settings.noteFolder;
    await this.createYearFolderNote(year);
    await this.createMonthFolderNote(year, month);
    await this.createDayNote(year, month, day);
    return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${month}/${day}.md`, "", true);
  }
  async createOrOpenTomorrowsDailyNote() {
    const date = (0, import_obsidian.moment)().add(1, "days");
    const year = date.format("YYYY");
    const month = date.format("YYYY-MM");
    const day = date.format("YYYY-MM-DD");
    let noteFolderPath = this.settings.noteFolder;
    await this.createYearFolderNote(year);
    await this.createMonthFolderNote(year, month);
    await this.createDayNote(year, month, day);
    return this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${month}/${day}.md`, "", true);
  }
  async createOrOpenLast5DaysNotes() {
    const noteFolderPath = this.settings.noteFolder;
    for (let i = 4; i >= 0; i--) {
      const date = (0, import_obsidian.moment)().subtract(i, "days");
      const year = date.format("YYYY");
      const month = date.format("YYYY-MM");
      const day = date.format("YYYY-MM-DD");
      await this.createYearFolderNote(year);
      await this.createMonthFolderNote(year, month);
      await this.createDayNote(year, month, day);
      await this.app.workspace.openLinkText(`${noteFolderPath}/${year}/${month}/${day}.md`, "", true);
    }
  }
  async generateAllDailyNotesForCurrentYear() {
    const noteFolderPath = this.settings.noteFolder;
    const today = (0, import_obsidian.moment)();
    const endOfYear = (0, import_obsidian.moment)().endOf("year");
    for (let date = today.clone(); date.isBefore(endOfYear); date.add(1, "days")) {
      const year = date.format("YYYY");
      const month = date.format("YYYY-MM");
      const day = date.format("YYYY-MM-DD");
      await this.createYearFolderNote(year);
      await this.createMonthFolderNote(year, month);
      await this.createDayNote(year, month, day);
    }
  }
};
var FolderPeriodicNotesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Note folder").setDesc("The folder where your periodic notes will be stored").addText(
      (text) => text.setPlaceholder("/").setValue(this.plugin.settings.noteFolder).onChange(async (value) => {
        this.plugin.settings.noteFolder = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
