/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZettelkastenOutliner
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ZettelkastenOutliner = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "create-outline",
      name: "Create outline",
      checkCallback: (checking) => {
        const currentFile = this.app.workspace.getActiveFile();
        if (!!currentFile) {
          if (checking) {
            return true;
          } else {
            const outlineName = `Zettelkasten Outline ${new Date().getTime()}.md`;
            this.app.vault.create(outlineName, "").then((outputFile) => {
              this.parseZettel(outputFile, currentFile, 0);
              this.app.workspace.openLinkText(outputFile.name, "", true);
            });
          }
        } else {
          return false;
        }
      }
    });
  }
  getChildrenFiles(file) {
    let children = [];
    const linkToFile = `[[${file.name.replace(/\.md$/, "")}]]`;
    const fullLinkToFile = `[[${file.path.replace(/\.md$/, "")}]]`;
    this.app.vault.getMarkdownFiles().forEach((markdownFile) => {
      var _a, _b, _c, _d;
      if (((_b = (_a = this.app.metadataCache.getFileCache(markdownFile)) == null ? void 0 : _a.frontmatter) == null ? void 0 : _b.parent) === linkToFile || ((_d = (_c = this.app.metadataCache.getFileCache(markdownFile)) == null ? void 0 : _c.frontmatter) == null ? void 0 : _d.parent) === fullLinkToFile) {
        children.push(markdownFile);
      }
    });
    return children;
  }
  parseZettel(outputFile, zettel, indentationLevel) {
    this.app.vault.append(outputFile, this.generateListItem(zettel, indentationLevel));
    this.getChildrenFiles(zettel).forEach((child) => {
      this.parseZettel(outputFile, child, indentationLevel + 1);
    });
  }
  generateListItem(file, indentationLevel) {
    let identation = "";
    for (let i = 0; i < indentationLevel; i++) {
      identation = identation.concat("  ");
    }
    return `${identation}- ![[${file.path.replace(/\.md$/, "")}]]
`;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWmV0dGVsa2FzdGVuT3V0bGluZXIgZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdGlkOiAnY3JlYXRlLW91dGxpbmUnLFxuXHRcdFx0bmFtZTogJ0NyZWF0ZSBvdXRsaW5lJyxcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4ge1xuXHRcdFx0XHRjb25zdCBjdXJyZW50RmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cblx0XHRcdFx0aWYgKCEhY3VycmVudEZpbGUpIHtcblx0XHRcdFx0XHRpZiAoY2hlY2tpbmcpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zdCBvdXRsaW5lTmFtZSA9IGBaZXR0ZWxrYXN0ZW4gT3V0bGluZSAke25ldyBEYXRlKCkuZ2V0VGltZSgpfS5tZGA7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcC52YXVsdC5jcmVhdGUob3V0bGluZU5hbWUsIFwiXCIpLnRoZW4oKG91dHB1dEZpbGU6IFRGaWxlKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMucGFyc2VaZXR0ZWwob3V0cHV0RmlsZSwgY3VycmVudEZpbGUsIDApO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub3BlbkxpbmtUZXh0KG91dHB1dEZpbGUubmFtZSwgXCJcIiwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0Z2V0Q2hpbGRyZW5GaWxlcyhmaWxlOiBURmlsZSk6IFRGaWxlW10ge1xuXHRcdGxldCBjaGlsZHJlbiA9IFtdXHRhcyBURmlsZVtdO1xuXHRcdGNvbnN0IGxpbmtUb0ZpbGUgPSBgW1ske2ZpbGUubmFtZS5yZXBsYWNlKC9cXC5tZCQvLCBcIlwiKX1dXWA7XG5cdFx0Y29uc3QgZnVsbExpbmtUb0ZpbGUgPSBgW1ske2ZpbGUucGF0aC5yZXBsYWNlKC9cXC5tZCQvLCBcIlwiKX1dXWA7XG5cdFx0dGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpLmZvckVhY2goKG1hcmtkb3duRmlsZSkgPT4ge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHR0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShtYXJrZG93bkZpbGUpPy5mcm9udG1hdHRlcj8ucGFyZW50ID09PSBsaW5rVG9GaWxlXG5cdFx0XHRcdHx8IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKG1hcmtkb3duRmlsZSk/LmZyb250bWF0dGVyPy5wYXJlbnQgPT09IGZ1bGxMaW5rVG9GaWxlXG5cdFx0XHQpIHtcblx0XHRcdFx0Y2hpbGRyZW4ucHVzaChtYXJrZG93bkZpbGUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBjaGlsZHJlbjtcblx0fVxuXG5cdHBhcnNlWmV0dGVsKG91dHB1dEZpbGU6IFRGaWxlLCB6ZXR0ZWw6IFRGaWxlLCBpbmRlbnRhdGlvbkxldmVsOiBudW1iZXIpIHtcblx0XHR0aGlzLmFwcC52YXVsdC5hcHBlbmQob3V0cHV0RmlsZSwgdGhpcy5nZW5lcmF0ZUxpc3RJdGVtKHpldHRlbCwgaW5kZW50YXRpb25MZXZlbCkpO1xuXHRcdHRoaXMuZ2V0Q2hpbGRyZW5GaWxlcyh6ZXR0ZWwpLmZvckVhY2goKGNoaWxkKSA9PiB7XG5cdFx0XHR0aGlzLnBhcnNlWmV0dGVsKG91dHB1dEZpbGUsIGNoaWxkLCBpbmRlbnRhdGlvbkxldmVsICsgMSk7XG5cdFx0fSk7XG5cdH1cblxuXHRnZW5lcmF0ZUxpc3RJdGVtKGZpbGU6IFRGaWxlLCBpbmRlbnRhdGlvbkxldmVsOiBudW1iZXIpOiBzdHJpbmcge1xuXHRcdGxldCBpZGVudGF0aW9uID0gXCJcIjtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGluZGVudGF0aW9uTGV2ZWw7IGkrKykge1xuXHRcdFx0aWRlbnRhdGlvbiA9IGlkZW50YXRpb24uY29uY2F0KFwiICBcIik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAke2lkZW50YXRpb259LSAhW1ske2ZpbGUucGF0aC5yZXBsYWNlKC9cXC5tZCQvLCBcIlwiKX1dXVxcbmA7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBOEI7QUFFOUIsSUFBcUIsdUJBQXJCLGNBQWtELHVCQUFPO0FBQUEsRUFDeEQsTUFBTSxTQUFTO0FBQ2QsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixlQUFlLENBQUMsYUFBc0I7QUFDckMsY0FBTSxjQUFjLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFFckQsWUFBSSxDQUFDLENBQUMsYUFBYTtBQUNsQixjQUFJLFVBQVU7QUFDYixtQkFBTztBQUFBLFVBQ1IsT0FBTztBQUNOLGtCQUFNLGNBQWMsd0JBQXdCLElBQUksS0FBSyxFQUFFLFFBQVE7QUFDL0QsaUJBQUssSUFBSSxNQUFNLE9BQU8sYUFBYSxFQUFFLEVBQUUsS0FBSyxDQUFDLGVBQXNCO0FBQ2xFLG1CQUFLLFlBQVksWUFBWSxhQUFhLENBQUM7QUFDM0MsbUJBQUssSUFBSSxVQUFVLGFBQWEsV0FBVyxNQUFNLElBQUksSUFBSTtBQUFBLFlBQzFELENBQUM7QUFBQSxVQUNGO0FBQUEsUUFDRCxPQUFPO0FBQ04saUJBQU87QUFBQSxRQUNSO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLGlCQUFpQixNQUFzQjtBQUN0QyxRQUFJLFdBQVcsQ0FBQztBQUNoQixVQUFNLGFBQWEsS0FBSyxLQUFLLEtBQUssUUFBUSxTQUFTLEVBQUU7QUFDckQsVUFBTSxpQkFBaUIsS0FBSyxLQUFLLEtBQUssUUFBUSxTQUFTLEVBQUU7QUFDekQsU0FBSyxJQUFJLE1BQU0saUJBQWlCLEVBQUUsUUFBUSxDQUFDLGlCQUFpQjtBQS9COUQ7QUFnQ0csWUFDQyxnQkFBSyxJQUFJLGNBQWMsYUFBYSxZQUFZLE1BQWhELG1CQUFtRCxnQkFBbkQsbUJBQWdFLFlBQVcsZ0JBQ3hFLGdCQUFLLElBQUksY0FBYyxhQUFhLFlBQVksTUFBaEQsbUJBQW1ELGdCQUFuRCxtQkFBZ0UsWUFBVyxnQkFDN0U7QUFDRCxpQkFBUyxLQUFLLFlBQVk7QUFBQSxNQUMzQjtBQUFBLElBQ0QsQ0FBQztBQUNELFdBQU87QUFBQSxFQUNSO0FBQUEsRUFFQSxZQUFZLFlBQW1CLFFBQWUsa0JBQTBCO0FBQ3ZFLFNBQUssSUFBSSxNQUFNLE9BQU8sWUFBWSxLQUFLLGlCQUFpQixRQUFRLGdCQUFnQixDQUFDO0FBQ2pGLFNBQUssaUJBQWlCLE1BQU0sRUFBRSxRQUFRLENBQUMsVUFBVTtBQUNoRCxXQUFLLFlBQVksWUFBWSxPQUFPLG1CQUFtQixDQUFDO0FBQUEsSUFDekQsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLGlCQUFpQixNQUFhLGtCQUFrQztBQUMvRCxRQUFJLGFBQWE7QUFDakIsYUFBUyxJQUFJLEdBQUcsSUFBSSxrQkFBa0IsS0FBSztBQUMxQyxtQkFBYSxXQUFXLE9BQU8sSUFBSTtBQUFBLElBQ3BDO0FBRUEsV0FBTyxHQUFHLGtCQUFrQixLQUFLLEtBQUssUUFBUSxTQUFTLEVBQUU7QUFBQTtBQUFBLEVBQzFEO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
